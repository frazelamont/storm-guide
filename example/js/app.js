(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _stormGuide = require('./libs/storm-guide');

var _stormGuide2 = _interopRequireDefault(_stormGuide);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var onDOMContentLoadedTasks = [function () {
  _stormGuide2.default.init();
}];

if ('addEventListener' in window) window.addEventListener('DOMContentLoaded', function () {
  onDOMContentLoadedTasks.forEach(function (fn) {
    return fn();
  });
});

},{"./libs/storm-guide":2}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
/**
 * @name storm-guide: GDS Guide page-like implementation
 * @version 0.1.1: Thu, 05 Jan 2017 17:57:29 GMT
 * @author stormid
 * @license MIT
 */
var defaults = {
	linkClassName: '.js-guide__link',
	sectionClassName: '.js-guide__section',
	incrementalNavHolder: '.js-guide__incremental',
	activeClassName: 'active'
},
    hash = location.hash.slice(1) || null,
    templates = {
	previousNav: ['<a href="{{link}}" rel="previous" class="js-guide__incremental--previous nav-incremental-link page-navigation__prev">', '<div class="nav-incremental__part">Part {{num}}</div>', '<div class="nav-incremental__title">{{title}}</div>', '</div>'].join(''),
	nextNav: ['<a href="{{link}}" rel="next" class="js-guide__incremental--previous nav-incremental-link page-navigation__prev">', '<div class="nav-incremental__part">Part {{num}}</div>', '<div class="nav-incremental__title">{{title}}</div>', '</div>'].join('')
},
    render = function render(template, data) {
	for (var k in data) {
		if (data.hasOwnProperty(k)) {
			template = template.split('{{' + k + '}}').join(data[k]);
		}
	}
	return template;
};

var StormGuide = {
	init: function init() {
		if (hash) window.location.hash = '';

		this.links = [].slice.call(document.querySelectorAll(this.settings.linkClassName)) || null;
		this.sections = [].slice.call(document.querySelectorAll(this.settings.sectionClassName));
		this.incrementalNavHolder = document.querySelector(this.settings.incrementalNavHolder) || null;
		this.currentIndex = 0;
		this.currentTitle = '';

		if (!this.links || !this.sections || !this.incrementalNavHolder) throw new Error('Guide could not be initialised, ');

		this.setInitialState();
		this.setVisibility();
		this.setAria();
		this.renderIncrementalNav();
		this.bindEvents('.js-guide__link');

		return this;
	},
	setInitialState: function setInitialState() {
		var _this = this;

		this.links.forEach(function (link, i) {
			if (link.getAttribute('href').substr(1) === hash) {
				_this.currentIndex = i;
				_this.currentTitle = link.innerText;
			}
		});
		!this.currentTitle ? this.links[this.currentIndex].innerText : this.currentTitle;
	},
	setVisibility: function setVisibility(previousIndex) {
		if (previousIndex !== undefined) {
			this.links[previousIndex].classList.remove(this.settings.activeClassName);
			this.sections[previousIndex].classList.remove(this.settings.activeClassName);
		}
		this.links[this.currentIndex].classList.add(this.settings.activeClassName);
		this.sections[this.currentIndex].classList.add(this.settings.activeClassName);

		window.scrollTo(0, 0);
		window.setTimeout(function () {
			if (hash && window.location.hash === '') !!window.history && !!window.history.pushState && window.history.pushState({ URL: '#' + hash }, '', '#' + hash);
			window.scrollTo(0, 0);
		}, 0);
	},
	setAria: function setAria() {
		for (var i = 0; i < this.links.length; i++) {
			this.links[i].setAttribute('aria-selected', this.currentIndex === i);
			this.links[i].setAttribute('aria-controls', this.links[i].getAttribute('href').substr(1));
			this.sections[i].setAttribute('aria-hidden', !(this.currentIndex === i));
		}
	},
	renderIncrementalNav: function renderIncrementalNav() {
		var _this2 = this;

		var incrementalNav = '',
		    getNavData = function getNavData(i) {
			return {
				link: _this2.links[i].href,
				num: i + 1,
				title: _this2.links[i].innerText
			};
		};

		if (this.currentIndex > 0) incrementalNav = render(templates.previousNav, getNavData(this.currentIndex - 1));

		if (this.currentIndex !== this.links.length - 1) incrementalNav += render(templates.nextNav, getNavData(this.currentIndex + 1));

		this.incrementalNavHolder.innerHTML = incrementalNav;
		this.bindEvents('.js-guide__incremental--previous, .js-guide__incremental--next');
	},
	bindEvents: function bindEvents(sel) {
		var _this3 = this;

		[].slice.call(document.querySelectorAll(sel)).forEach(function (btn) {
			btn.addEventListener('click', _this3.change.bind(_this3));
		});
	},
	change: function change(e) {
		e.preventDefault();
		var previousIndex = this.currentIndex,
		    nextUrl = (e.target.parentNode.getAttribute('href') || e.target.getAttribute('href')).split('#')[1],
		    nextIndex = this.getNextIndex('#' + nextUrl);

		if (previousIndex === nextIndex) return;

		this.currentIndex = nextIndex;
		this.setVisibility(previousIndex);
		this.setAria();
		this.renderIncrementalNav();

		!!window.history && !!window.history.pushState && window.history.pushState({ URL: '#' + nextUrl }, '', '#' + nextUrl);
	},
	getNextIndex: function getNextIndex(href) {
		return this.links.reduce(function (a, link, i) {
			if (link.getAttribute('href') === href) a.push(i);return a;
		}, [])[0];
	}
};

var init = function init(opts) {
	return Object.assign(Object.create(StormGuide), {
		settings: Object.assign({}, defaults, opts)
	}).init();
};

exports.default = { init: init };

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
