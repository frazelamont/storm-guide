(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _stormGuide = require('./libs/storm-guide');

var _stormGuide2 = _interopRequireDefault(_stormGuide);

function _interopRequireDefault(obj) {
	return obj && obj.__esModule ? obj : { default: obj };
}

var onDOMContentLoadedTasks = [function () {
	var guide = _stormGuide2.default.init();
	console.log(guide);
}];

if ('addEventListener' in window) window.addEventListener('DOMContentLoaded', function () {
	onDOMContentLoadedTasks.forEach(function (fn) {
		return fn();
	});
});

},{"./libs/storm-guide":2}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
/**
 * @name storm-guide: GDS Guide page-like implementation
 * @version 0.1.1: Wed, 08 Feb 2017 09:12:19 GMT
 * @author stormid
 * @license MIT
 */
var CONSTANTS = {
	TRIGGER_EVENTS: ['click', 'keydown'],
	TRIGGER_KEYCODES: [13, 32]
},
    defaults = {
	linkClassName: '.js-guide__link',
	sectionClassName: '.js-guide__section',
	incrementalNavHolder: '.js-guide__incremental',
	activeClassName: 'active'
},
    hash = window.location && window.location.hash.slice(1) || null,
    templates = {
	previousNav: ['<a href="{{link}}" rel="previous" class="js-guide__incremental--previous guide__incremental--previous">', '<div class="guide__incremental-part">Part {{num}}</div>', '<div class="guide__incremental-title">{{title}}</div>', '</div>'].join(''),
	nextNav: ['<a href="{{link}}" rel="next" class="js-guide__incremental--next guide__incremental--next">', '<div class="guide__incremental-part">Part {{num}}</div>', '<div class="guide__incremental-itle">{{title}}</div>', '</div>'].join('')
},
    render = function render(template, data) {
	for (var k in data) {
		if (data.hasOwnProperty(k)) {
			template = template.split('{{' + k + '}}').join(data[k]);
		}
	}
	return template;
};

var StormGuide = {
	init: function init() {
		if (window.location) window.location.hash = '';

		this.links = [].slice.call(document.querySelectorAll(this.settings.linkClassName)) || null;
		this.sections = [].slice.call(document.querySelectorAll(this.settings.sectionClassName));
		this.incrementalNavHolder = document.querySelector(this.settings.incrementalNavHolder) || null;
		this.currentIndex = 0;
		this.currentTitle = '';

		if (!this.links.length || !this.sections.length || !this.incrementalNavHolder) throw new Error('Guide could not be initialised, ');

		this.setInitialState();
		this.setVisibility();
		this.setAria();
		this.renderIncrementalNav();
		this.bindEvents('.js-guide__link');

		return this;
	},
	setInitialState: function setInitialState() {
		var _this = this;

		this.links.forEach(function (link, i) {
			if (link.getAttribute('href').substr(1) === hash) {
				_this.currentIndex = i;
				_this.currentTitle = link.innerText;
			}
		});
		!this.currentTitle ? this.links[this.currentIndex].innerText : this.currentTitle;
	},
	setVisibility: function setVisibility(previousIndex) {
		if (previousIndex !== undefined) {
			this.links[previousIndex].classList.remove(this.settings.activeClassName);
			this.sections[previousIndex].classList.remove(this.settings.activeClassName);
		}
		this.links[this.currentIndex].classList.add(this.settings.activeClassName);
		this.sections[this.currentIndex].classList.add(this.settings.activeClassName);

		window.scrollTo(0, 0);
		window.setTimeout(function () {
			if (hash && window.location.hash === '') !!window.history && !!window.history.pushState && window.history.pushState({ URL: '#' + hash }, '', '#' + hash);
			window.scrollTo(0, 0);
		}, 0);
	},
	setAria: function setAria() {
		for (var i = 0; i < this.links.length; i++) {
			this.links[i].setAttribute('aria-selected', this.currentIndex === i);
			this.links[i].setAttribute('aria-controls', this.links[i].getAttribute('href').substr(1));
			this.sections[i].setAttribute('aria-hidden', !(this.currentIndex === i));
		}
	},
	renderIncrementalNav: function renderIncrementalNav() {
		var _this2 = this;

		var incrementalNav = '',
		    getNavData = function getNavData(i) {
			return {
				link: _this2.links[i].href,
				num: i + 1,
				title: _this2.links[i].innerText
			};
		};

		if (this.currentIndex > 0) incrementalNav = render(templates.previousNav, getNavData(this.currentIndex - 1));

		if (this.currentIndex !== this.links.length - 1) incrementalNav += render(templates.nextNav, getNavData(this.currentIndex + 1));

		this.incrementalNavHolder.innerHTML = incrementalNav;
		this.bindEvents('.js-guide__incremental--previous, .js-guide__incremental--next');
	},
	bindEvents: function bindEvents(sel) {
		var _this3 = this;

		[].slice.call(document.querySelectorAll(sel)).forEach(function (btn) {
			CONSTANTS.TRIGGER_EVENTS.forEach(function (ev) {
				btn.addEventListener(ev, function (e) {
					if (!!e.keyCode && !~CONSTANTS.TRIGGER_KEYCODES.indexOf(e.keyCode)) return;
					e.preventDefault();
					_this3.change(e.target);
				});
			});
		});
	},
	change: function change(link) {
		var previousIndex = this.currentIndex,
		    nextUrl = (link.parentNode.getAttribute('href') || link.getAttribute('href')).split('#')[1],
		    nextIndex = this.getNextIndex('#' + nextUrl);

		if (previousIndex === nextIndex) return;

		this.currentIndex = nextIndex;
		this.setVisibility(previousIndex);
		this.setAria();
		this.renderIncrementalNav();

		!!window.history && !!window.history.pushState && window.history.pushState({ URL: '#' + nextUrl }, '', '#' + nextUrl);
	},
	getNextIndex: function getNextIndex(href) {
		return this.links.reduce(function (a, link, i) {
			if (link.getAttribute('href') === href) a.push(i);return a;
		}, [])[0];
	}
};

var init = function init(opts) {
	return Object.assign(Object.create(StormGuide), {
		settings: Object.assign({}, defaults, opts)
	}).init();
};

exports.default = { init: init };

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJleGFtcGxlL3NyYy9hcHAuanMiLCJleGFtcGxlL3NyYy9saWJzL3N0b3JtLWd1aWRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQTs7Ozs7Ozs7QUFFQSxJQUFNLDJCQUEyQixZQUFNLEFBQ3RDO0tBQUksUUFBUSxxQkFBWixBQUFZLEFBQU0sQUFDbEI7U0FBQSxBQUFRLElBQVIsQUFBWSxBQUNaO0FBSEQsQUFBZ0MsQ0FBQTs7QUFLaEMsSUFBRyxzQkFBSCxBQUF5QixlQUFRLEFBQU8saUJBQVAsQUFBd0Isb0JBQW9CLFlBQU0sQUFBRTt5QkFBQSxBQUF3QixRQUFRLFVBQUEsQUFBQyxJQUFEO1NBQUEsQUFBUTtBQUF4QyxBQUFnRDtBQUFwRyxDQUFBOzs7Ozs7OztBQ1BqQzs7Ozs7O0FBTUEsSUFBTTtpQkFDWSxDQUFBLEFBQUMsU0FERCxBQUNBLEFBQVUsQUFDMUI7bUJBQWtCLENBQUEsQUFBQyxJQUZyQixBQUFrQixBQUVFLEFBQUs7QUFGUCxBQUNoQjtJQUdEO2dCQUFXLEFBQ0ssQUFDZjttQkFGVSxBQUVRLEFBQ2xCO3VCQUhVLEFBR1ksQUFDdEI7a0JBUkYsQUFJWSxBQUlPO0FBSlAsQUFDVjtJQUtELE9BQVEsT0FBQSxBQUFPLFlBQVksT0FBQSxBQUFPLFNBQVAsQUFBZ0IsS0FBaEIsQUFBcUIsTUFBekMsQUFBb0IsQUFBMkIsTUFWdkQsQUFVOEQ7SUFDN0Q7Y0FDYyxDQUFBLEFBQUMsMkdBQUQsQUFDVCwyREFEUyxBQUVULHlEQUZTLEFBR1QsVUFIUyxBQUdDLEtBSkgsQUFDRSxBQUdNLEFBQ25CO1VBQVMsQ0FBQSxBQUFDLCtGQUFELEFBQ0wsMkRBREssQUFFTCx3REFGSyxBQUdMLFVBSEssQUFHSyxLQW5CaEIsQUFXYSxBQUtGLEFBR1U7QUFSUixBQUNYO0lBU0QsU0FBUyxTQUFULEFBQVMsT0FBQSxBQUFTLFVBQVQsQUFBbUIsTUFBSyxBQUNo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LEFBQWUsVUFBVSxFQUFFLEtBQUssTUFBaEMsQUFBeUIsQUFBYSxXQUF0QyxBQUFpRCxJQUFJLE1BQXpHLEFBQW9ELEFBQTJELEFBQy9HO0FBNUZpQixBQTZGbEI7QUE3RmtCLHFDQUFBLEFBNkZMLE1BQUssQUFDakI7Y0FBTyxBQUFLLE1BQUwsQUFBVyxPQUFPLFVBQUEsQUFBQyxHQUFELEFBQUksTUFBSixBQUFVLEdBQU0sQUFBRTtPQUFHLEtBQUEsQUFBSyxhQUFMLEFBQWtCLFlBQXJCLEFBQWlDLE1BQU0sRUFBQSxBQUFFLEtBQUYsQUFBTyxHQUFJLE9BQUEsQUFBTyxBQUFJO0FBQWpHLEdBQUEsRUFBQSxBQUFtRyxJQUExRyxBQUFPLEFBQXVHLEFBQzlHO0FBL0ZGLEFBQW1CO0FBQUEsQUFDbEI7O0FBaUdELElBQU0sT0FBTyxTQUFQLEFBQU8sV0FBUSxBQUNwQjtlQUFPLEFBQU8sT0FBTyxPQUFBLEFBQU8sT0FBckIsQUFBYyxBQUFjO1lBQ3hCLE9BQUEsQUFBTyxPQUFQLEFBQWMsSUFBZCxBQUFrQixVQUR0QixBQUF5QyxBQUNyQyxBQUE0QjtBQURTLEFBQy9DLEVBRE0sRUFBUCxBQUFPLEFBRUosQUFDSDtBQUpEOztrQkFNZSxFQUFFLE0sQUFBRiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJpbXBvcnQgR3VpZGUgZnJvbSAnLi9saWJzL3N0b3JtLWd1aWRlJztcblxuY29uc3Qgb25ET01Db250ZW50TG9hZGVkVGFza3MgPSBbKCkgPT4ge1xuXHRsZXQgZ3VpZGUgPSBHdWlkZS5pbml0KCk7XG5cdGNvbnNvbGUubG9nKGd1aWRlKTtcbn1dO1xuICAgIFxuaWYoJ2FkZEV2ZW50TGlzdGVuZXInIGluIHdpbmRvdykgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7IG9uRE9NQ29udGVudExvYWRlZFRhc2tzLmZvckVhY2goKGZuKSA9PiBmbigpKTsgfSk7IiwiLyoqXG4gKiBAbmFtZSBzdG9ybS1ndWlkZTogR0RTIEd1aWRlIHBhZ2UtbGlrZSBpbXBsZW1lbnRhdGlvblxuICogQHZlcnNpb24gMC4xLjE6IFdlZCwgMDggRmViIDIwMTcgMDk6MTI6MTkgR01UXG4gKiBAYXV0aG9yIHN0b3JtaWRcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5jb25zdCBDT05TVEFOVFMgPSB7XG5cdFx0VFJJR0dFUl9FVkVOVFM6IFsnY2xpY2snLCAna2V5ZG93biddLFxuXHRcdFRSSUdHRVJfS0VZQ09ERVM6IFsxMywgMzJdXG5cdH0sXG5cdGRlZmF1bHRzID0ge1xuXHRcdGxpbmtDbGFzc05hbWU6ICcuanMtZ3VpZGVfX2xpbmsnLFxuXHRcdHNlY3Rpb25DbGFzc05hbWU6ICcuanMtZ3VpZGVfX3NlY3Rpb24nLFxuXHRcdGluY3JlbWVudGFsTmF2SG9sZGVyOiAnLmpzLWd1aWRlX19pbmNyZW1lbnRhbCcsXG5cdFx0YWN0aXZlQ2xhc3NOYW1lOiAnYWN0aXZlJ1xuXHR9LFxuXHRoYXNoID0gKHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaC5zbGljZSgxKSkgfHwgbnVsbCxcblx0dGVtcGxhdGVzID0ge1xuXHRcdHByZXZpb3VzTmF2OiBbJzxhIGhyZWY9XCJ7e2xpbmt9fVwiIHJlbD1cInByZXZpb3VzXCIgY2xhc3M9XCJqcy1ndWlkZV9faW5jcmVtZW50YWwtLXByZXZpb3VzIGd1aWRlX19pbmNyZW1lbnRhbC0tcHJldmlvdXNcIj4nLFxuXHRcdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJndWlkZV9faW5jcmVtZW50YWwtcGFydFwiPlBhcnQge3tudW19fTwvZGl2PicsXG5cdFx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cImd1aWRlX19pbmNyZW1lbnRhbC10aXRsZVwiPnt7dGl0bGV9fTwvZGl2PicsXG5cdFx0XHRcdFx0XHQnPC9kaXY+J10uam9pbignJyksXG5cdFx0bmV4dE5hdjogWyc8YSBocmVmPVwie3tsaW5rfX1cIiByZWw9XCJuZXh0XCIgY2xhc3M9XCJqcy1ndWlkZV9faW5jcmVtZW50YWwtLW5leHQgZ3VpZGVfX2luY3JlbWVudGFsLS1uZXh0XCI+Jyxcblx0XHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwiZ3VpZGVfX2luY3JlbWVudGFsLXBhcnRcIj5QYXJ0IHt7bnVtfX08L2Rpdj4nLFxuXHRcdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJndWlkZV9faW5jcmVtZW50YWwtaXRsZVwiPnt7dGl0bGV9fTwvZGl2PicsXG5cdFx0XHRcdFx0XHQnPC9kaXY+J10uam9pbignJylcblx0fSxcblx0cmVuZGVyID0gZnVuY3Rpb24odGVtcGxhdGUsIGRhdGEpe1xuXHRcdGZvcih2YXIgayBpbiBkYXRhKXtcblx0XHRcdGlmKGRhdGEuaGFzT3duUHJvcGVydHkoaykpe1xuXHRcdFx0XHR0ZW1wbGF0ZSA9IHRlbXBsYXRlLnNwbGl0KCd7eycgKyBrICsgJ319Jykuam9pbihkYXRhW2tdKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRlbXBsYXRlO1xuXHR9O1xuXG5jb25zdCBTdG9ybUd1aWRlID0ge1xuXHRpbml0KCl7XG5cdFx0aWYod2luZG93LmxvY2F0aW9uKSB3aW5kb3cubG9jYXRpb24uaGFzaCA9ICcnO1xuXG5cdFx0dGhpcy5saW5rcyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLnNldHRpbmdzLmxpbmtDbGFzc05hbWUpKSB8fCBudWxsO1xuXHRcdHRoaXMuc2VjdGlvbnMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5zZXR0aW5ncy5zZWN0aW9uQ2xhc3NOYW1lKSk7XG5cdFx0dGhpcy5pbmNyZW1lbnRhbE5hdkhvbGRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5zZXR0aW5ncy5pbmNyZW1lbnRhbE5hdkhvbGRlcikgfHwgbnVsbDtcblx0XHR0aGlzLmN1cnJlbnRJbmRleCA9IDA7XG5cdFx0dGhpcy5jdXJyZW50VGl0bGUgPSAnJztcblxuXHRcdGlmKCF0aGlzLmxpbmtzLmxlbmd0aCB8fCAhdGhpcy5zZWN0aW9ucy5sZW5ndGggfHwgIXRoaXMuaW5jcmVtZW50YWxOYXZIb2xkZXIpIHRocm93IG5ldyBFcnJvcignR3VpZGUgY291bGQgbm90IGJlIGluaXRpYWxpc2VkLCAnKTtcblx0XHRcblx0XHR0aGlzLnNldEluaXRpYWxTdGF0ZSgpO1xuXHRcdHRoaXMuc2V0VmlzaWJpbGl0eSgpO1xuXHRcdHRoaXMuc2V0QXJpYSgpO1xuXHRcdHRoaXMucmVuZGVySW5jcmVtZW50YWxOYXYoKTtcblx0XHR0aGlzLmJpbmRFdmVudHMoJy5qcy1ndWlkZV9fbGluaycpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdFx0XG5cdH0sXG5cdHNldEluaXRpYWxTdGF0ZSgpe1xuXHRcdHRoaXMubGlua3MuZm9yRWFjaCgobGluaywgaSkgPT4ge1xuXHRcdFx0aWYobGluay5nZXRBdHRyaWJ1dGUoJ2hyZWYnKS5zdWJzdHIoMSkgPT09IGhhc2gpIHtcblx0XHRcdFx0dGhpcy5jdXJyZW50SW5kZXggPSBpO1xuXHRcdFx0XHR0aGlzLmN1cnJlbnRUaXRsZSA9IGxpbmsuaW5uZXJUZXh0O1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdCF0aGlzLmN1cnJlbnRUaXRsZSA/IHRoaXMubGlua3NbdGhpcy5jdXJyZW50SW5kZXhdLmlubmVyVGV4dCA6IHRoaXMuY3VycmVudFRpdGxlO1xuXHR9LFxuXHRzZXRWaXNpYmlsaXR5KHByZXZpb3VzSW5kZXgpe1xuXHRcdGlmKHByZXZpb3VzSW5kZXggIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5saW5rc1twcmV2aW91c0luZGV4XS5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuc2V0dGluZ3MuYWN0aXZlQ2xhc3NOYW1lKTtcblx0XHRcdHRoaXMuc2VjdGlvbnNbcHJldmlvdXNJbmRleF0uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLnNldHRpbmdzLmFjdGl2ZUNsYXNzTmFtZSk7XG5cdFx0fVxuXHRcdHRoaXMubGlua3NbdGhpcy5jdXJyZW50SW5kZXhdLmNsYXNzTGlzdC5hZGQodGhpcy5zZXR0aW5ncy5hY3RpdmVDbGFzc05hbWUpO1xuXHRcdHRoaXMuc2VjdGlvbnNbdGhpcy5jdXJyZW50SW5kZXhdLmNsYXNzTGlzdC5hZGQodGhpcy5zZXR0aW5ncy5hY3RpdmVDbGFzc05hbWUpO1xuXHRcdFxuXHRcdHdpbmRvdy5zY3JvbGxUbygwLDApO1xuXHRcdHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdGlmKGhhc2ggJiYgd2luZG93LmxvY2F0aW9uLmhhc2ggPT09ICcnKSAgKCEhd2luZG93Lmhpc3RvcnkgJiYgISF3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUpICYmIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7IFVSTDogYCMke2hhc2h9YH0sICcnLCBgIyR7aGFzaH1gKTtcblx0XHRcdHdpbmRvdy5zY3JvbGxUbygwLDApO1xuXHRcdH0sIDApO1xuXHR9LFxuXHRzZXRBcmlhKCl7XG5cdFx0Zm9yKGxldCBpID0gMDsgaSA8IHRoaXMubGlua3MubGVuZ3RoOyBpKyspe1xuXHRcdFx0dGhpcy5saW5rc1tpXS5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCB0aGlzLmN1cnJlbnRJbmRleCA9PT0gaSk7XG5cdFx0XHR0aGlzLmxpbmtzW2ldLnNldEF0dHJpYnV0ZSgnYXJpYS1jb250cm9scycsIHRoaXMubGlua3NbaV0uZ2V0QXR0cmlidXRlKCdocmVmJykuc3Vic3RyKDEpKTtcblx0XHRcdHRoaXMuc2VjdGlvbnNbaV0uc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICEodGhpcy5jdXJyZW50SW5kZXggPT09IGkpKTtcblx0XHR9XG5cdH0sXG5cdHJlbmRlckluY3JlbWVudGFsTmF2KCl7XG5cdFx0dmFyIGluY3JlbWVudGFsTmF2ID0gJycsXG5cdFx0XHRnZXROYXZEYXRhID0gaSA9PiB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bGluazogdGhpcy5saW5rc1tpXS5ocmVmLFxuXHRcdFx0XHRcdG51bTogaSArIDEsXG5cdFx0XHRcdFx0dGl0bGU6IHRoaXMubGlua3NbaV0uaW5uZXJUZXh0XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXHRcdFxuXHRcdGlmKHRoaXMuY3VycmVudEluZGV4ID4gMCkgaW5jcmVtZW50YWxOYXYgPSByZW5kZXIodGVtcGxhdGVzLnByZXZpb3VzTmF2LCBnZXROYXZEYXRhKHRoaXMuY3VycmVudEluZGV4IC0gMSkpO1xuXHRcdFxuXHRcdGlmKHRoaXMuY3VycmVudEluZGV4ICE9PSB0aGlzLmxpbmtzLmxlbmd0aCAtIDEpIGluY3JlbWVudGFsTmF2ICs9IHJlbmRlcih0ZW1wbGF0ZXMubmV4dE5hdiwgZ2V0TmF2RGF0YSh0aGlzLmN1cnJlbnRJbmRleCArIDEpKTtcblx0XHRcblx0XHR0aGlzLmluY3JlbWVudGFsTmF2SG9sZGVyLmlubmVySFRNTCA9IGluY3JlbWVudGFsTmF2O1xuXHRcdHRoaXMuYmluZEV2ZW50cygnLmpzLWd1aWRlX19pbmNyZW1lbnRhbC0tcHJldmlvdXMsIC5qcy1ndWlkZV9faW5jcmVtZW50YWwtLW5leHQnKTtcblx0fSxcblx0YmluZEV2ZW50cyhzZWwpIHtcblx0XHRbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsKSkuZm9yRWFjaChidG4gPT4ge1xuXHRcdFx0Q09OU1RBTlRTLlRSSUdHRVJfRVZFTlRTLmZvckVhY2goZXYgPT4ge1xuXHRcdFx0XHRidG4uYWRkRXZlbnRMaXN0ZW5lcihldiwgZSA9PiB7XG5cdFx0XHRcdFx0aWYoISFlLmtleUNvZGUgJiYgIX5DT05TVEFOVFMuVFJJR0dFUl9LRVlDT0RFUy5pbmRleE9mKGUua2V5Q29kZSkpIHJldHVybjtcblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0dGhpcy5jaGFuZ2UoZS50YXJnZXQpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9LFxuXHRjaGFuZ2UobGluaykge1xuXHRcdGxldCBwcmV2aW91c0luZGV4ID0gdGhpcy5jdXJyZW50SW5kZXgsXG5cdFx0XHRuZXh0VXJsID0gKGxpbmsucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSB8fCBsaW5rLmdldEF0dHJpYnV0ZSgnaHJlZicpKS5zcGxpdCgnIycpWzFdLFxuXHRcdFx0bmV4dEluZGV4ID0gdGhpcy5nZXROZXh0SW5kZXgoJyMnICsgbmV4dFVybCk7XG5cdFx0XG5cdFx0aWYocHJldmlvdXNJbmRleCA9PT0gbmV4dEluZGV4KSByZXR1cm47XG5cdFx0XG5cdFx0dGhpcy5jdXJyZW50SW5kZXggPSBuZXh0SW5kZXg7XG5cdFx0dGhpcy5zZXRWaXNpYmlsaXR5KHByZXZpb3VzSW5kZXgpO1xuXHRcdHRoaXMuc2V0QXJpYSgpO1xuXHRcdHRoaXMucmVuZGVySW5jcmVtZW50YWxOYXYoKTtcblxuXHRcdCghIXdpbmRvdy5oaXN0b3J5ICYmICEhd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKSAmJiB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoeyBVUkw6ICcjJyArIG5leHRVcmwgfSwgJycsICcjJyArIG5leHRVcmwpO1xuXHR9LFxuXHRnZXROZXh0SW5kZXgoaHJlZil7XG5cdFx0cmV0dXJuIHRoaXMubGlua3MucmVkdWNlKChhLCBsaW5rLCBpKSA9PiB7IGlmKGxpbmsuZ2V0QXR0cmlidXRlKCdocmVmJykgPT09IGhyZWYpIGEucHVzaChpKTsgcmV0dXJuIGE7IH0sIFtdKVswXTtcblx0fVxufTtcblxuY29uc3QgaW5pdCA9IG9wdHMgPT4ge1xuXHRyZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKFN0b3JtR3VpZGUpLCB7XG5cdFx0c2V0dGluZ3M6IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRzLCBvcHRzKVxuXHR9KS5pbml0KCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB7IGluaXQgfTsiXX0=
